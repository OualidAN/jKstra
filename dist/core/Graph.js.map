{"version":3,"sources":["../../src/core/Graph.js"],"names":[],"mappings":"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","file":"Graph.js","sourcesContent":["import { IN, OUT } from './constants.js';\nimport { propsMatch } from './utils.js';\n\nconst Graph = function() {\n    const vertices = [];\n    const edges = [];\n\n    return {\n        addVertex(data) {\n            const vertex = {\n                _in: [],\n                _out: [],\n                data: data\n            };\n            vertices.push(vertex);\n            return vertex;\n        },\n\n        addEdge(from, to, data) {\n            const edge = {\n                from: from,\n                to: to,\n                data: data || {}\n            };\n            from._out.push(edge);\n            to._in.push(edge);\n            edges.push(edge);\n            return edge;\n        },\n\n        /**\n        Shortcut to add an edge and its reverse,\n        sharing the same data.\n        */\n        addEdgePair(a, b, data) {\n            return [\n                this.addEdge(a, b, data),\n                this.addEdge(b, a, data)\n            ];\n        },\n\n        removeEdge(edge) {\n            const index = edges.indexOf(edge);\n            if(index !== -1) {\n                // remove from extremity vertices first\n                edge.from._out.splice(edge.from._out.indexOf(edge), 1);\n                edge.to._in.splice(edge.to._in.indexOf(edge), 1);\n                edges.splice(index, 1);\n            }\n        },\n\n        removeVertex(vertex) {\n            const index = vertices.indexOf(vertex);\n            if(index !== -1) {\n                // remove all incident edges first\n                const edgesToRemove = vertex._in.concat(vertex._out);\n                for(let i = 0; i < edgesToRemove.length; i++) {\n                    this.removeEdge(edgesToRemove[i]);\n                }\n                vertices.splice(index, 1);\n            }\n        },\n\n        outEdges(vertex, filter) {\n            return this.incidentEdges(vertex, OUT, filter);\n        },\n\n        inEdges(vertex, filter) {\n            return this.incidentEdges(vertex, IN, filter);\n        },\n\n        /**\n        Returns all edges incident to a vertex, in one direction (outgoing or incoming),\n        optionnaly filtered by a given function.\n        */\n        incidentEdges(vertex, direction, filter) {\n            if(!filter) {\n                return direction ? vertex._out : vertex._in;\n            }\n            const edges = direction ? vertex._out : vertex._in;\n            return edges.filter(filter);\n        },\n\n        vertex(props) {\n            for(let i = 0, l = vertices.length; i < l; i++) {\n                if(propsMatch(vertices[i].data, props)) {\n                    return vertices[i];\n                }\n            }\n            return null;\n        },\n\n        edge(props) {\n            for(let i = 0, l = edges.length; i < l; i++) {\n                if(propsMatch(edges[i].data, props)) {\n                    return edges[i];\n                }\n            }\n            return null;\n        },\n\n        /**\n        Perform an action on each vertex of the graph\n        */\n        forEachVertex(action) {\n            vertices.forEach(v => action(v));\n        },\n\n        /**\n        Perform an action on each edge of the graph\n        */\n        forEachEdge(action) {\n            edges.forEach(e => action(e));\n        }\n    };\n};\n\nexport default Graph;\n"]}