{"version":3,"sources":["../../src/core/Graph.js"],"names":[],"mappings":"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","file":"Graph.js","sourcesContent":["import { IN, OUT } from './const.js';\nimport { propsMatch } from './utils.js';\n\nconst Graph = function(opts) {\n    const vertices = [];\n    const edges = [];\n\n    return {\n        addVertex: function(data) {\n            const vertex = {\n                _in: [],\n                _out: [],\n                data: data\n            };\n            vertices.push(vertex);\n            return vertex;\n        },\n\n        addEdge: function(from, to, data) {\n            const edge = {\n                from: from,\n                to: to,\n                data: data || {}\n            };\n            from._out.push(edge);\n            to._in.push(edge);\n            edges.push(edge);\n            return edge;\n        },\n\n        /**\n        Shortcut to add an edge and its reverse,\n        sharing the same data.\n        */\n        addEdgePair: function(a, b, data) {\n            return [\n                this.addEdge(a, b, data),\n                this.addEdge(b, a, data)\n            ];\n        },\n\n        removeEdge: function(edge) {\n            const index = edges.indexOf(edge);\n            if(index !== -1) {\n                // remove from extremity vertices first\n                // TODO PERF: replace splice with a function operating in-place\n                edge.from._out.splice(edge.from._out.indexOf(edge), 1);\n                edge.to._in.splice(edge.to._in.indexOf(edge), 1);\n                edges.splice(index, 1);\n            }\n        },\n\n        removeVertex: function(vertex) {\n            const index = vertices.indexOf(vertex);\n            if(index !== -1) {\n                // remove all incident edges first\n                const edgesToRemove = vertex._in.concat(vertex._out);\n                for(let i = 0; i < edgesToRemove.length; i++) {\n                    this.removeEdge(edgesToRemove[i]);\n                }\n                vertices.splice(index, 1);\n            }\n        },\n\n        outEdges: function(vertex, filter) {\n            return this.incidentEdges(vertex, OUT, filter);\n        },\n\n        inEdges: function(vertex, filter) {\n            return this.incidentEdges(vertex, IN, filter);\n        },\n\n        /**\n        Returns all edges incident to a vertex, in one direction (outgoing or incoming),\n        optionnaly filtered by a given function.\n        */\n        incidentEdges: function(vertex, direction, filter) {\n            if(!filter) {\n                return direction ? vertex._out : vertex._in;\n            }\n            const edges = direction ? vertex._out : vertex._in;\n            return edges.filter(filter);\n        },\n\n        vertex: function(props) {\n            let v = null;\n            for(let i = 0, l = vertices.length; i < l && v == null; i++) {\n                if(propsMatch(vertices[i].data, props)) {\n                    v = vertices[i];\n                }\n            }\n            return v;\n        },\n\n        edge: function(props) {\n            let e = null;\n            for(let i = 0, l = edges.length; i < l && e == null; i++) {\n                if(propsMatch(edges[i].data, props)) {\n                    e = edges[i];\n                }\n            }\n            return e;\n        },\n\n        /**\n        Perform an action on each vertex of the graph\n        */\n        forEachVertex: function(action) {\n            for(let i = 0, l = vertices.length; i < l; i++) {\n                action(vertices[i]);\n            }\n        },\n\n        /**\n        Perform an action on each edge of the graph\n        */\n        forEachEdge: function(action) {\n            for(let i = 0, l = edges.length; i < l; i++) {\n                action(edges[i]);\n            }\n        }\n    };\n};\n\nexport default Graph;\n"]}